
[질문 대비 - JSP 게시판 프로젝트]

1. Q: 왜 JSP와 Servlet을 사용했나요?
   A: JSP와 Servlet은 Java 웹 개발의 기초로, View와 Controller 역할을 명확히 분리할 수 있어 학습에 적합했습니다. Spring에 들어가기 전 흐름 이해에 좋습니다.

2. Q: MVC 패턴이 무엇인가요? 어떻게 적용했나요?
   A: MVC는 Model-View-Controller 구조입니다. JSP를 View, Servlet을 Controller로 사용했고, 이후 DB를 Model로 연동할 예정입니다.

3. Q: 로그인 검증은 어떻게 처리하고 있나요?
   A: 현재는 하드코딩된 admin/1234 계정을 비교합니다. 향후 Oracle DB에서 사용자 정보를 조회하여 로그인 검증 예정입니다.

4. Q: 세션은 어떻게 활용되고 있나요?
   A: 로그인 상태를 유지하기 위해 HttpSession을 사용할 수 있으며, LogoutServlet에서 세션을 무효화하고 로그인 화면으로 이동합니다.

5. Q: 실제 DB를 연동하면 어떤 기능이 확장되나요?
   A: 사용자 정보와 게시글을 DB에서 관리할 수 있으며, 게시글 작성, 수정, 삭제와 같은 CRUD 기능이 구현 가능합니다.

6. Q: 보안 처리는 어떻게 할 계획인가요?
   A: 로그인한 사용자만 접근 가능하도록 세션 검증, 입력값 검증, SQL Injection 방지, 비밀번호 암호화 등을 적용할 예정입니다.

7. Q: Spring Framework로 확장할 수 있나요?
   A: JSP/Servlet 기반 구조는 Spring MVC와 유사하여 Controller-Service-DAO로 구조 분리 후 Spring Boot로 확장 가능합니다.

8. Q: 이 프로젝트를 통해 배운 점은?
   A: Java 웹 구조 이해, MVC 패턴 적용, 요청-처리-응답 흐름 경험, 웹앱의 실전 개발 흐름을 학습했습니다.

9. Q: 로그인 성공 시 데이터는 어떻게 전달되나요?
   A: 로그인 후에는 response.sendRedirect로 페이지를 이동시키며, 필요 시 session 또는 request에 데이터를 담아 전달할 수 있습니다.

10. Q: 게시판 목록은 어떻게 출력되고 있나요?
    A: 현재는 boardList.jsp에서 샘플 데이터를 HTML 테이블로 출력 중이며, 이후 DB에서 데이터 조회 후 반복문으로 출력할 예정입니다.

11. Q: Maven은 왜 사용하나요?
    A: Maven은 프로젝트 빌드 및 의존성 관리를 쉽게 해주는 도구로, servlet-api, JDBC 드라이버 등을 자동으로 관리해줍니다.

12. Q: 웹.xml은 무슨 역할을 하나요?
    A: 웹 애플리케이션의 설정 파일로, 시작 페이지(welcome-file), 필터, 서블릿 매핑 등을 설정합니다.


❓ 1. 왜 JSP와 Servlet을 사용했나요?
답변:
JSP와 Servlet은 Java 웹 개발의 기본 기술로,
웹 애플리케이션에서 화면(View)과 요청 처리(Controller)를 구분해 구현할 수 있어 학습에 적합했습니다.
또한 Spring 같은 프레임워크에 들어가기 전에 기본 흐름을 이해하기 위해 선택했습니다.

❓ 2. MVC 패턴이 무엇인가요? 어떻게 적용했나요?
답변:
MVC는 Model-View-Controller 패턴으로,

View: 사용자 인터페이스 (JSP)

Controller: 사용자 요청 처리 (Servlet)

Model: (예정) DB와 데이터를 연결하는 부분
저는 JSP를 View로, Servlet을 Controller로 구현해서 흐름을 명확히 나눴습니다.

❓ 3. 로그인 검증은 어떻게 처리하고 있나요?
답변:
현재는 LoginServlet에서 아이디와 비밀번호를 하드코딩해서 비교하고,
정상일 경우 boardList.jsp로 리다이렉트합니다.
향후에는 Oracle DB와 연동해서 사용자 테이블을 조회하는 방식으로 바꿀 예정입니다.

❓ 4. 세션(Session)은 어떻게 활용하고 있나요?
답변:
로그인 시 세션을 통해 사용자 정보를 유지할 수 있도록 구현할 수 있고,
로그아웃 시에는 LogoutServlet에서 session.invalidate()로 세션을 만료시켜 로그아웃 처리를 했습니다.
지금은 세션 저장은 생략했지만 구조상 세션 적용이 가능합니다.

❓ 5. 실제로 Oracle DB와 연동하면 어떤 기능이 추가되나요?
답변:

사용자 정보를 DB에서 조회해 로그인 처리

게시글을 DB에 저장하고 불러오기

게시글 작성, 수정, 삭제 등 CRUD 기능 구현

데이터가 영구 저장되므로 실사용 가능한 게시판 형태가 됩니다.

❓ 6. 보안 처리는 어떻게 할 계획인가요?
답변:

로그인한 사용자만 게시판 접근 가능하도록 세션 검증 처리 예정

JSP에서 입력값 검증 추가 (예: 공백 방지, SQL Injection 방지)

비밀번호는 DB에 저장할 때 해시 암호화 처리 계획입니다.

❓ 7. Spring Framework로 확장할 수 있나요?
답변:
네, 가능합니다.
현재 구현한 JSP/Servlet 구조는 Spring MVC의 기본 구조와 동일합니다.
앞으로 Controller, Service, DAO로 분리하고 Spring Boot로 마이그레이션하면 실무형 웹앱으로 확장할 수 있습니다.

❓ 8. 이 프로젝트를 통해 무엇을 배웠나요?
답변:

Java 웹 애플리케이션 구조에 대한 이해

요청 → 처리 → 응답의 흐름

MVC 패턴 적용과 JSP/Servlet 역할 구분

향후 DB 연동, UI 개선, 보안까지 확장 가능한 웹 구조 설계 경험

✅ 이미지 설명: JSP Servlet Architecture
1. Browser (사용자 브라우저)
사용자가 웹사이트에 접속하고 요청(예: 로그인 버튼 클릭)을 발생시킴

2. Web Server
Apache, Nginx 등 일반적인 HTTP 서버

요청을 받아서 적절한 Application Server로 전달

3. HTTP Request
클라이언트가 보낸 요청 (POST, GET 등)을 서블릿 컨테이너로 전달

4. Servlet Container (예: Tomcat)
Java 기반 요청을 처리할 수 있는 실행 환경

서블릿 클래스를 찾아서 실행

5. Request/Response 처리
요청을 분석하고, 해당 서블릿을 실행

서블릿에서 요청을 처리한 결과를 JSP 또는 다른 리소스로 전달

6. Business Logic
실제 로직 수행 (예: DB 검색, 로그인 검증 등)

이 부분에서 Java 클래스/DAO 등을 통해 데이터 처리

7. Response
처리 결과를 JSP를 통해 HTML 형태로 응답

사용자 브라우저에 결과가 표시됨
